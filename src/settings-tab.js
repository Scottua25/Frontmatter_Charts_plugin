import { PluginSettingTab, Setting } from "obsidian";
export class HeatmapSettingTab extends PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this._newHeatmapTypeName = "";
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Heatmap Chart Settings" });
        // Max RDA slider
        new Setting(containerEl)
            .setName("Max RDA% in Heatmap")
            .setDesc("Clamp the color scale to this maximum value")
            .addSlider((slider) => slider
            .setLimits(50, 200, 10)
            .setValue(this.plugin.settings.maxRDA)
            .setDynamicTooltip()
            .onChange(async (value) => {
            this.plugin.settings.maxRDA = value;
            await this.plugin.saveSettings();
        }));
        // Date limit
        new Setting(containerEl)
            .setName("Limit to most recent days")
            .setDesc("0 = no limit")
            .addText((text) => text
            .setPlaceholder("e.g., 7")
            .setValue(this.plugin.settings.limitDays.toString())
            .onChange(async (value) => {
            this.plugin.settings.limitDays = parseInt(value) || 0;
            await this.plugin.saveSettings();
        }));
        // Dynamic heatmap editors
        containerEl.createEl("h3", { text: "Heatmap Types" });
        Object.entries(this.plugin.settings.heatmapTypes).forEach(([key, config]) => {
            const block = containerEl.createDiv({ cls: "heatmap-config-block" });
            // Title + delete button
            new Setting(block)
                .setName(`Type: ${key}`)
                .addButton((btn) => btn.setButtonText("Delete")
                .setWarning()
                .onClick(async () => {
                delete this.plugin.settings.heatmapTypes[key];
                await this.plugin.saveSettings();
                this.display();
            }));
            // Field list
            new Setting(block)
                .setName("Fields (comma-separated)")
                .addText((text) => text
                .setPlaceholder("e.g., protein_g, fat_g")
                .setValue(config.fields.join(", "))
                .onChange(async (value) => {
                this.plugin.settings.heatmapTypes[key].fields = value.split(",").map(s => s.trim());
                await this.plugin.saveSettings();
            }));
            // RDA override (optional)
            new Setting(block)
                .setName("RDA Overrides (field=number, comma-separated)")
                .setDesc("e.g., protein_g=200, fat_g=70")
                .addText((text) => text
                .setPlaceholder("Optional")
                .setValue(config.rda ? Object.entries(config.rda).map(([k, v]) => `${k}=${v}`).join(", ") : "")
                .onChange(async (value) => {
                const rda = {};
                value.split(",").forEach(pair => {
                    const [k, v] = pair.split("=").map(s => s.trim());
                    if (k && v && !isNaN(Number(v)))
                        rda[k] = Number(v);
                });
                this.plugin.settings.heatmapTypes[key].rda = rda;
                await this.plugin.saveSettings();
            }));
        });
        // Add new heatmap type
        new Setting(containerEl)
            .setName("Add New Heatmap Type")
            .setDesc("Enter a unique code block name (e.g., my-nutrients)")
            .addText((text) => text.setPlaceholder("new-heatmap-type").onChange(value => (this._newHeatmapTypeName = value.trim())))
            .addButton((btn) => btn.setButtonText("Add").onClick(async () => {
            const name = this._newHeatmapTypeName;
            if (!name || this.plugin.settings.heatmapTypes[name])
                return;
            this.plugin.settings.heatmapTypes[name] = { fields: [] };
            await this.plugin.saveSettings();
            this.display();
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,